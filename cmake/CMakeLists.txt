
function(setupProject type source)
    file(GLOB_RECURSE SOURCE_FILES ${ARGV1} ${ARGV1}/*.cpp ${ARGV1}/*.h ${ARGV1}/*.c)
    if(ARGV0 MATCHES "EXE")
        add_executable(${PROJECT_NAME} ${SOURCE_FILES})
    elseif(ARGV0 MATCHES "LIB_STATIC")
        add_library(${PROJECT_NAME} STATIC ${SOURCE_FILES})
    elseif(ARGV0 MATCHES "LIB_SHARED")
        add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES})
    endif()
    if(CMAKE_SYSTEM_NAME MATCHES "Linux")
            target_compile_definitions(${PROJECT_NAME} PUBLIC -DLINUX)
    elseif(CMAKE_SYSTEM_NAME MATCHES "Windows")
            target_compile_definitions(${PROJECT_NAME} PUBLIC -DWINDOWS)
    elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
            target_compile_definitions(${PROJECT_NAME} PUBLIC -DMACOS)
    elseif(CMAKE_SYSTEM_NAME MATCHES "Android")
        target_compile_definitions(${PROJECT_NAME} PUBLIC -DANDROID)
    endif()
    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/build)
    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/build)
    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/build)
    set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "lib")
    set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
    target_include_directories(${PROJECT_NAME} PUBLIC ../include)
endfunction()
function(setupLibrary name)
    find_library(LIB ${ARGV0} ${LIB_PATH}/${ARGV0}/build)
    if (NOT LIB)
        message(WARNING "Could not find library ${ARGV0}")
        return()
    endif ()
    target_include_directories(${PROJECT_NAME} PRIVATE  ${LIB_PATH}/${ARGV0}/include)
    target_link_libraries(${PROJECT_NAME} ${LIB})
endfunction()

